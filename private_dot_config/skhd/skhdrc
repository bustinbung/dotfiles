# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# ############################################################### #
# THE FOLLOWING SECTION CONTAIN SIMPLE MAPPINGS DEMONSTRATING HOW #
# TO INTERACT WITH THE YABAI WM. THESE ARE SUPPOSED TO BE USED AS #
# A REFERENCE ONLY, WHEN MAKING YOUR OWN CONFIGURATION..          #
# ############################################################### #

# move managed window
# shift + cmd - h : yabai -m window --warp east

# balance size of windows
# shift + alt - 0 : yabai -m space --balance

# make floating window fill left-half of screen
# shift + alt - left   : yabai -m window --grid 1:2:0:0:1:1

# create desktop, move window and follow focus - uses jq for parsing json (brew install jq)
# shift + cmd - n : yabai -m space --create && \
#                   index="$(yabai -m query --spaces --display | jq 'map(select(."is-native-fullscreen" == false))[-1].index')" && \
#                   yabai -m window --space "${index}" && \
#                   yabai -m space --focus "${index}"

# send window to desktop and follow focus
# shift + cmd - z : yabai -m window --space next; yabai -m space --focus next
# shift + cmd - 2 : yabai -m window --space  2; yabai -m space --focus 2

# focus monitor
# ctrl + alt - z  : yabai -m display --focus prev
# ctrl + alt - 3  : yabai -m display --focus 3

# send window to monitor and follow focus
# ctrl + cmd - c  : yabai -m window --display next; yabai -m display --focus next
# ctrl + cmd - 1  : yabai -m window --display 1; yabai -m display --focus 1

# move floating window
# shift + ctrl - a : yabai -m window --move rel:-20:0
# shift + ctrl - s : yabai -m window --move rel:0:20

# increase window size
# shift + alt - a : yabai -m window --resize left:-20:0
# shift + alt - w : yabai -m window --resize top:0:-20

# decrease window size
# shift + cmd - s : yabai -m window --resize bottom:0:-20
# shift + cmd - w : yabai -m window --resize top:0:20

# set insertion point in focused container
# ctrl + alt - h : yabai -m window --insert west

# toggle window zoom
# alt - d : yabai -m window --toggle zoom-parent
# alt - f : yabai -m window --toggle zoom-fullscreen

# toggle window split type
# alt - e : yabai -m window --toggle split

# float / unfloat window and center on screen
# alt - t : yabai -m window --toggle float --grid 4:4:1:1:2:2

# toggle sticky(+float), topmost, picture-in-picture
# alt - p : yabai -m window --toggle sticky --toggle topmost --toggle pip

# focus window
lalt - k : yabai -m query --spaces --space \
    | jq -re ".index" \
    | xargs -I{} yabai -m query --windows --space {} \
    | jq -sre 'add | map(select(."is-minimized"==false)) | sort_by(.display, .frame.y, .frame.x, .id) | . as $array | length as $array_length | index(map(select(."has-focus"==true))) as $has_index | if $has_index > 0 then nth($has_index - 1).id else nth($array_length - 1).id end' \
    | xargs -I{} yabai -m window --focus {}
lalt - j : yabai -m query --spaces --space \
    | jq -re ".index" \
    | xargs -I{} yabai -m query --windows --space {} \
    | jq -sre 'add | map(select(."is-minimized"==false)) | sort_by(.display, .frame.y, .frame.x, .id) | . as $array | length as $array_length | index(map(select(."has-focus"==true))) as $has_index | if $array_length - 1 > $has_index then nth($has_index + 1).id else nth(0).id end' \
    | xargs -I{} yabai -m window --focus {}

# swap managed window in space
lalt + shift - k : yabai -m window --swap prev || yabai -m window --swap last
lalt + shift - j : yabai -m window --swap next || yabai -m window --swap first

# focus display
lalt + ctrl - k : yabai -m display --focus prev || yabai -m display --focus last
lalt + ctrl - j : yabai -m display --focus next || yabai -m display --focus first

# focus space
lalt - 1 : yabai -m space --focus 1
lalt - 2 : yabai -m space --focus 2
lalt - 3 : yabai -m space --focus 3
lalt - 4 : yabai -m space --focus 4
lalt - 5 : yabai -m space --focus 5
lalt - 6 : yabai -m space --focus 6
lalt - 7 : yabai -m space --focus 7
lalt - 8 : yabai -m space --focus 8
lalt - 9 : yabai -m space --focus 9

# move window to space
lalt + shift - 1 : yabai -m window --space 1
lalt + shift - 2 : yabai -m window --space 2
lalt + shift - 3 : yabai -m window --space 3
lalt + shift - 4 : yabai -m window --space 4
lalt + shift - 5 : yabai -m window --space 5
lalt + shift - 6 : yabai -m window --space 6
lalt + shift - 7 : yabai -m window --space 7
lalt + shift - 8 : yabai -m window --space 8
lalt + shift - 9 : yabai -m window --space 9

# change master width
lalt + shift - h : ~/.config/skhd/scripts/resizeWindow.sh -h
lalt + shift - l : ~/.config/skhd/scripts/resizeWindow.sh -l

# change window height
lalt + shift - u : ~/.config/skhd/scripts/resizeWindow.sh -u
lalt + shift - d : ~/.config/skhd/scripts/resizeWindow.sh -d

# balance windows
lalt + shift - b : yabai -m space --balance

# mirror space on x and y axis
lalt + shift - x : yabai -m space --mirror x-axis
lalt + shift - y : yabai -m space --mirror y-axis

# float/unfloat window
lalt - space : yabai -m window --toggle float

# make floating window fill screen
lalt - m : yabai -m window --grid 1:1:0:0:1:1 || yabai -m window --toggle zoom-fullscreen; yabai -m window --focus

# open alacritty
lalt - t : open -n /Applications/Alacritty.app

# open raycast
lalt - r : open /Applications/Raycast.app

# open new arc window
lalt - b : osascript ~/.config/skhd/scripts/openNewArc.scpt

# quit frontmost app
lalt + shift - c : osascript ~/.config/skhd/scripts/killFrontApp.scpt

# reload yabai, sketchybar, skhd
lalt + shift - r : source ~/.config/yabai/yabairc && sketchybar --reload && skhd -r

# hard reload yabai
lalt + shift + ctrl - r : yabai --restart-service

# move window to master
ctrl + lalt - return : yabai -m window --swap first

# focus master
# lalt - return : yabai -m window --focus first

# toggle layout
lalt - s : ~/.config/skhd/scripts/changeLayout.sh
lalt + shift - s : ~/.config/skhd/scripts/changeLayout.sh -r

# open new finder window
lalt - f : osascript ~/.config/skhd/scripts/openNewFinder.scpt

# open new emacs window
lalt - e : open "/Applications/Emacs (Client).app"
