;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!


;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets. It is optional.
(setq user-full-name "Justin Jung"
      user-mail-address "justin@bustinbung.com")

;; Doom exposes five (optional) variables for controlling fonts in Doom:
;;
;; - `doom-font' -- the primary font to use
;; - `doom-variable-pitch-font' -- a non-monospace font (where applicable)
;; - `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;; - `doom-symbol-font' -- for symbols
;; - `doom-serif-font' -- for the `fixed-pitch-serif' face
;;
;; See 'C-h v doom-font' for documentation and more examples of what they
;; accept. For example:
;;
(setq doom-font (font-spec :family "Monaspace Argon" :size 16 :weight 'Regular)
      doom-variable-pitch-font (font-spec :family "SF Pro" :size 13))
;;
;; If you or Emacs can't find your font, use 'M-x describe-font' to look them
;; up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to
;; refresh your font settings. If Emacs still can't find your font, it likely
;; wasn't installed correctly. Font issues are rarely Doom issues!

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-theme 'catppuccin)

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type 'relative)

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
{{- if .is_wsl }}
(setq org-directory "/mnt/d/Nextcloud/org/"
      org-agenda-files (directory-files-recursively (concat org-directory "agenda/") "\\.org$"))
{{- else }}
(setq org-directory "~/Nextcloud/org/"
      org-agenda-files (directory-files-recursively (concat org-directory "agenda/") "\\.org$"))
;;      org-agenda-files (directory-files-recursively "~/Nextcloud/org" "\\.org$"))
{{- end }}


;; Whenever you reconfigure a package, make sure to wrap your config in an
;; `after!' block, otherwise Doom's defaults may override your settings. E.g.
;;
;;   (after! PACKAGE
;;     (setq x y))
;;
;; The exceptions to this rule:
;;
;;   - Setting file/directory variables (like `org-directory')
;;   - Setting variables which explicitly tell you to set them before their
;;     package is loaded (see 'C-h v VARIABLE' to look up their documentation).
;;   - Setting doom variables (which start with 'doom-' or '+').
;;
;; Here are some additional functions/macros that will help you configure Doom.
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;; Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
;; etc).
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.

(setq scroll-margin 10)
(setq-default indent-tabs-mode t)
(setq-default tab-width 4)

(after! whitespace
  (setq whitespace-line-column 80) ;; limit line length
  (setq whitespace-style '(face lines-tail trailing indentation)))

;; Disables scroll margin in specific buffer types
;; From https://github.com/syl20bnr/spacemacs/issues/3098
(add-hook! '(
             messages-buffer-mode-hook
             comint-mode-hook
             vterm-mode-hook
             )
  (setq-local scroll-margin 0))

(after! treemacs
  (setq treemacs-position 'right))

;; Astro support
(after! astro-ts-mode
  (setq treesit-language-source-alist
        '((astro "https://github.com/virchau13/tree-sitter-astro")
          (css "https://github.com/tree-sitter/tree-sitter-css")
          (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")))
  (setq astro-ts-mode-indent-offset 4))

(add-to-list 'auto-mode-alist '("\\.astro\\'" . astro-ts-mode))

;; New emacsclient opens in main workspace
(after! persp-mode
  (setq persp-emacsclient-init-frame-behaviour-override "main"))

{{- if eq .chezmoi.os "darwin" }}
;; Fix Bash completion using MacOS built-in Bash
(after! bash-completion
  (setq bash-completion-prog "/opt/homebrew/bin/bash"))
{{- end }}

;; Org-mode
(after! org
  (org-clock-persistence-insinuate)
  (setq org-clock-persist t)
  (setq jj/keep-clock-running nil)
  (setq org-todo-keywords
        (quote ((sequence "TODO(t)" "NEXT(n)" "|"  "DONE(d)")
                (sequence "WAIT(w@/!)" "HOLD(h@/!)" "|" "KILL(k@/!)"))))
  (setq org-log-into-drawer "LOGBOOK")
  (setq org-export-date-timestamp-format "%Y-%m-%d"))

;; Custom functions for clocking in and out
;; From: https://doc.norang.ca/org-mode.html#Clocking
(defun jj/punch-in (arg)
  "Start continuous clocking and set default task."
  (interactive "p")
  (if (not (marker-position org-clock-default-task))
      (error "ERROR: Default task not set!"))
  (setq jj/keep-clock-running t)
  (save-restriction
    (widen)
    ;; Find tags on current task
    (if (and (equal major-mode 'org-mode) (not (org-before-first-heading-p)) (eq arg 4))
        (org-clock-in '(16))
      (jj/clock-in-default-task))))

(defun jj/punch-out ()
  (interactive)
  (setq jj/keep-clock-running nil)
  (when (org-clock-is-active)
    (org-clock-out))
  (org-agenda-remove-restriction-lock))

(defun jj/clock-in-default-task ()
  (save-excursion
    (org-with-point-at org-clock-default-task
      (org-clock-in))))

(defun jj/clock-in-parent-task ()
  "Move point to the parent (project) task if any and clock in"
  (let ((parent-task))
    (save-excursion
      (save-restriction
        (widen)
        (while (and (not parent-task) (org-up-heading-safe))
          (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
            (setq parent-task (point))))
        (if parent-task
            (org-with-point-at parent-task
              (org-clock-in))
          (when jj/keep-clock-running
            (jj/clock-in-default-task)))))))

(defun jj/clock-out-maybe ()
  (when (and jj/keep-clock-running
             (not org-clock-clocking-in)
             (marker-buffer org-clock-default-task)
             (not org-clock-resolving-clocks-due-to-idleness))
    (jj/clock-in-parent-task)))

(add-hook! 'org-clock-out-hook :append 'jj/clock-out-maybe )

(map! :mode org-mode-map :desc "+jj/punch-in" :leader "m c p i" #'jj/punch-in)
(map! :mode org-mode-map :desc "+jj/punch-out" :leader "m c p o" #'jj/punch-out)
(map! :mode org-mode-map :desc "org-clock-update-time-maybe" :leader "m c u" #'org-clock-update-time-maybe)

;; org-roam
(after! org-roam
  (setq org-roam-directory (file-truename(concat org-directory "notes/")))
  (setq org-roam-graph-link-hidden-types '("file" "http" "https"))
  (org-roam-db-autosync-mode))

(map! :mode org-mode-map :desc "org-roam-node-insert" :leader "m l m" #'org-roam-node-insert)
(map! :mode org-mode-map :desc "org-roam-buffer-toggle" :leader "o m" #'org-roam-buffer-toggle)

;; dired-preview
(after! dired-preview
  (setq dired-preview-delay 0.3)
  (setq dired-preview-max-file-size (expt 2 20))
  (setq dired-preview-ignored-extensions-regexp
        (concat "\\."
                "\\(gz\\|"
                "zst\\|"
                "tar\\|"
                "xz\\|"
                "rar\\|"
                "zip\\|"
                "iso\\|"
                "epub\\|"
                "\\)"))
  (dired-preview-global-mode 1))
